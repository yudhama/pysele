import time
import os
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from cobaTest.utils.driver_factory import get_driver
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    filename='security_test.log')
logger = logging.getLogger(__name__)

def create_csrf_test_page():
    """Create a simple HTML page that attempts a CSRF attack"""
    csrf_html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>CSRF Test Page</title>
    </head>
    <body>
        <h1>CSRF Test Page</h1>
        <form id="csrf_form" action="https://katalon-demo-cura.herokuapp.com/appointment.php" method="post" style="display:none;">
            <input type="text" name="facility" value="Seoul CURA Healthcare Center">
            <input type="checkbox" name="hospital_readmission" checked>
            <input type="radio" name="programs" value="Medicare" checked>
            <input type="text" name="visit_date" value="27/12/2023">
            <input type="text" name="comment" value="This appointment was created via CSRF">
            <input type="submit" value="Book Appointment">
        </form>
        <script>
            // Auto-submit the form when the page loads
            window.onload = function() {
                document.getElementById('csrf_form').submit();
            }
        </script>
    </body>
    </html>
    """
    
    # Create the file
    with open("csrf_test.html", "w") as f:
        f.write(csrf_html)
    
    return os.path.abspath("csrf_test.html")

def test_csrf_vulnerability():
    """Test for CSRF vulnerabilities in the CURA Healthcare application"""
    # Create the CSRF test page
    csrf_page_path = create_csrf_test_page()
    
    driver = get_driver(headless=False)
    
    try:
        # First, login to the application
        driver.get("https://katalon-demo-cura.herokuapp.com/")
        
        make_appointment_btn = driver.find_element(By.LINK_TEXT, "Make Appointment")
        make_appointment_btn.click()
        
        username_field = driver.find_element(By.ID, "txt-username")
        password_field = driver.find_element(By.ID, "txt-password")
        
        username_field.clear()
        password_field.clear()
        
        username_field.send_keys("John Doe")
        password_field.send_keys("ThisIsNotAPassword")
        
        login_btn = driver.find_element(By.ID, "btn-login")
        login_btn.click()
        
        # Verify we're logged in
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "combo_facility"))
        )
        
        # Now open the CSRF test page in the same browser session
        driver.get(f"file://{csrf_page_path}")
        time.sleep(3)  # Wait for the form to auto-submit
        
        # Check if the CSRF attack was successful by looking for confirmation page
        if "appointment.php#summary" in driver.current_url:
            logger.critical("CSRF vulnerability detected: Appointment was created via CSRF attack")
            print("CSRF vulnerability detected: Appointment was created via CSRF attack")
            
            # Check the appointment details
            comment = driver.find_element(By.ID, "comment").text
            if "This appointment was created via CSRF" in comment:
                logger.critical("CSRF attack confirmed: Appointment details match the attack payload")
                print("CSRF attack confirmed: Appointment details match the attack payload")
        else:
            logger.info("CSRF protection appears to be in place")
    
    except Exception as e:
        logger.error(f"Test failed: {e}")
    finally:
        # Clean up the test file
        if os.path.exists("csrf_test.html"):
            os.remove("csrf_test.html")
        
        driver.quit()

if __name__ == "__main__":
    test_csrf_vulnerability()